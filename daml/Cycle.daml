module Cycle 
    ( 
    -- * Cycles
    ClassTransfer (..)
    , Cycle (..)
    , TryExecute (..)
    -- Pending Cycles
    , TransferWitness (..)
    , CyclePending (..)
    , CyclePending_RegistrarSign (..)
    , CyclePending_TransferSign (..)
    , CyclePending_Abort (..)
    , CyclePending_Finalize (..)
    )
where

import Class 
import ClassSwap
import Data.Student
import Data.Function 

import DA.Assert 
import DA.List
import DA.Set (Set)
import qualified DA.Set as Set 
import DA.Map (Map)
import qualified DA.Map as Map 
import DA.Foldable (mapA_)
import DA.Functor (void)

{- |

Cycle Workflow

1. Some student creates a cycle proposal holding a cycle contract with all the 
expected trades
2. All students sign off, once per transfer they are involved in,
and add their corresponding ClassSwap.
3. The registrar makes a Cycle
4. The registrar trys to execute the Cycle and if it fails, just archives it

-}


-- | A lightweight represenation of a student's
-- transfer of losing a class they have and gaining
-- a class they want
data ClassTransfer = ClassTransfer with
    student : Student
    have : ClassKey 
    want : ClassKey 
        deriving (Eq, Ord, Show)

-- | A Cycle of trades, that if valid can be performed
template Cycle 
    with 
        transfers : [ClassTransfer]
        matchingSwaps : Map ClassTransfer (ContractId ClassSwap)
        registrar : Party
    where 
        signatory registrar :: Set.toList (partiesOfTransfers transfers)
        observer registrar :: Set.toList (partiesOfTransfers transfers)
        ensure validTransferCycle transfers
        
        choice TryExecute : Bool
            controller registrar 
            do try do
                    let transferSet = Set.fromList transfers
                    let mappedTransfers = Set.fromList (Map.keys matchingSwaps)
                    transferSet === mappedTransfers
                    mapA_ (swapPairValid registrar) (Map.toList matchingSwaps)
                    executeCycle transfers
                    return True
                catch
                    (_ : AnyException) -> archive self >> return False

-- | Check that the swap exists, that it matches the transfer by the (want, have,
-- student) fields, that the registrar is the one in the cycle, and that the swap
-- has it's own integrity (see @ClassSwap.validateSwap@).
swapPairValid : Party -> (ClassTransfer, ContractId ClassSwap) -> Update ()
swapPairValid reg (tf, swapId) = do 
    validTransferWitness reg (TransferWitness swapId tf)
    swap <- fetch swapId
    validateSwap swap >>= assert
    return ()

validTransferWitness : Party -> TransferWitness -> Update ()
validTransferWitness registrar (TransferWitness {..}) = do
    swap <- fetch swapId
    swap.currClassKey === transfer.have 
    swap.wantClassKey === transfer.want 
    swap.student === transfer.student
    registrar === swap.registrar

-- | Drop and add classes according to the transfers,
-- failing if the class state has changed in the meantime
executeCycle : [ClassTransfer] -> Update ()
executeCycle = mapA_ executeTransfer
    where
        -- Drop student from the 'have' class and add him to 
        -- the 'want' class, failing if it can't be done
        executeTransfer : ClassTransfer -> Update ()
        executeTransfer (ClassTransfer {..}) = do 
            let fromTrade = True
            let dropRecord = DropStudent with student 
            let addRecord = AddStudent with student; fromTrade  
            void $ exerciseByKey @Class have dropRecord
            void $ exerciseByKey @Class want addRecord

-- | Get all the students parties in a list of class transfers
partiesOfTransfers : [ClassTransfer] -> Set Party
partiesOfTransfers = Set.fromList . fmap (getField @"party" . getField @"student")

-- | A predicate on making sure a list of class transfers is valid
-- in all properties
validTransferCycle : [ClassTransfer] -> Bool
validTransferCycle = transfersFormCycle &&& uniqueClasses

-- | Cycle order validity
-- It's in order in a line and for (end :: ... :: start :: [])
-- we have end.have == start.want
transfersFormCycle : [ClassTransfer] -> Bool 
transfersFormCycle xs@(end ::_::_) =
    end.have == (last xs).want && transfersFormChain xs
transfersFormCycle _ = False

-- | Linear order validity
-- (x :: y :: xs) means x.want == y.have
transfersFormChain : [ClassTransfer] -> Bool 
transfersFormChain (x :: xs@(y :: _)) = x.want == y.have && transfersFormChain xs 
transfersFormChain _ = True

-- | All classes are unique so the cycle can't be
-- short-circuited
uniqueClasses : [ClassTransfer] -> Bool 
uniqueClasses = unique . fmap (getField @"have")

-- | A witness by which a ClassTransfer is validated
-- It is checked when added to a cycle, so students in a cycle
-- can be sure that when anyone joins, they aren't joining
-- in a dishonest way
data TransferWitness = TransferWitness with 
    swapId : ContractId ClassSwap 
    transfer : ClassTransfer 
        deriving (Eq, Ord, Show)

-- | A contract for making a cycle once each
-- ClassTransfer has a corresponding ContractId ClassSwap
-- and all the signatories have been added to haveSigned
-- (including the registrar)
template CyclePending 
    with 
        cycle : Cycle
        haveSigned : Set Party 
    where
        signatory (Set.toList haveSigned) 
        observer (signatory cycle)

        choice CyclePending_RegistrarSign : ContractId CyclePending
            controller cycle.registrar
            do
                assert (not (Set.member cycle.registrar haveSigned))
                let haveSigned = Set.insert cycle.registrar this.haveSigned
                create this with haveSigned
                
        choice CyclePending_TransferSign : ContractId CyclePending 
            with 
                witness : TransferWitness
            controller witness.transfer.student.party
            do
                let TransferWitness {..} = witness
                assert (transfer `elem` cycle.transfers)
                assert (not $ Map.member transfer cycle.matchingSwaps)
                validTransferWitness cycle.registrar witness
                let matchingSwaps = Map.insert transfer swapId cycle.matchingSwaps
                let cycle = this.cycle with matchingSwaps
                let haveSigned = Set.insert transfer.student.party this.haveSigned
                create this with cycle; haveSigned
        
        choice CyclePending_Abort : ()
            with 
                party : Party
            controller party 
            do 
                assert (party `elem` (signatory cycle))
                archive self

        choice CyclePending_Finalize : ContractId Cycle 
            controller cycle.registrar 
            do
                haveSigned === Set.fromList (signatory cycle)
                assert (all (`Map.member` cycle.matchingSwaps) cycle.transfers)
                create cycle